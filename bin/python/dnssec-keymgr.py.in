#!@PYTHON@
############################################################################
# Copyright (C) 2015  Internet Systems Consortium, Inc. ("ISC")
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND ISC DISCLAIMS ALL WARRANTIES WITH
# REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
# AND FITNESS.  IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,
# INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
# LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
# OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
# PERFORMANCE OF THIS SOFTWARE.
############################################################################

from __future__ import print_function
import os, sys, argparse, glob, re, time, calendar, pprint
from collections import defaultdict

prog='dnssec-keymgr'

############################################################################
# Load isc package -- first try to find it in the directory where
# the script lives (as when running it in the build tree); then
# try the configured prefix directory, and finally the global
# python search path.
############################################################################

d = os.path.dirname(sys.argv[0])
if d: sys.path.insert(0, d)
d = sys.path.append(os.path.join('@prefix@', 'lib'))
sys.path.insert(0, d)
from isc import *

# These routines permit platform-independent location of BIND 9 tools
if os.name == 'nt':
    import win32con
    import win32api

def prefix(bindir = ''):
    if os.name != 'nt':
        return os.path.join('@prefix@', bindir)

    bind_subkey = "Software\\ISC\\BIND"
    hKey = None
    keyFound = True
    try:
        hKey = win32api.RegOpenKeyEx(win32con.HKEY_LOCAL_MACHINE, bind_subkey)
    except:
        keyFound = False
    if keyFound:
        try:
            (namedBase, _) = win32api.RegQueryValueEx(hKey, "InstallDir")
        except:
            keyFound = False
        win32api.RegCloseKey(hKey)
    if keyFound:
        return os.path.join(namedBase, bindir)
    return os.path.join(win32api.GetSystemDirectory(), bindir)

############################################################################
# the output() function prints the specified content, but
# prepends a line of vertical space first *unless* this is the
# first time output() has been called since a call to vreset().
############################################################################
_firstline = True
def output(*args, **kwargs):
    """output text, adding a vertical space this is *not* the first
    first section being printed since a call to vreset()"""
    global _firstline
    if 'skip' in kwargs:
        skip = kwargs['skip']
        kwargs.pop('skip', None)
    else:
        skip = True
    if _firstline:
        _firstline = False
    elif skip:
        print('')
    if len(args) != 0:
        print(*args, **kwargs)

def vreset():
    """reset vertical spacing"""
    global _firstline
    _firstline = True

############################################################################
# argument parsing functions
############################################################################
def parse_time(s):
    """convert a formatted time (e.g., 1y, 6mo, 15mi, etc) into seconds"""
    s = s.strip()

    # if s is an integer, we're done already
    try:
        n = int(s)
        return n
    except:
        pass

    # try to parse as a number with a suffix indicating unit of time
    r = re.compile('([0-9][0-9]*)\s*([A-Za-z]*)')
    m = r.match(s)
    if not m:
        raise Exception("Cannot parse %s" % s)
    (n, unit) = m.groups()
    n = int(n)
    unit = unit.lower()
    if unit[0] == 'y':
        return n * 31536000
    elif unit[0] == 'm' and unit[1] == 'o':
        return n * 2592000
    elif unit[0] == 'w':
        return n * 604800
    elif unit[0] == 'd':
        return n * 86400
    elif unit[0] == 'h':
        return n * 3600
    elif unit[0] == 'm' and unit[1] == 'i':
        return n * 60 
    elif unit[0] == 's':
        return n
    else:
        raise Exception("Invalid suffix %s" % unit)

def set_path(command, default=None):
    """find the location of a specified command.  if a default is supplied
    and it works, we use it; otherwise we search PATH for a match.  If
    not found, error and exit"""
    fpath = default
    if not fpath or not os.path.isfile(fpath) or not os.access(fpath, os.X_OK):
        path = os.environ["PATH"]
        if not path:
            path = os.path.defpath
        for directory in path.split(os.pathsep):
            fpath = directory + os.sep + command
            if os.path.isfile(fpath) and os.access(fpath, os.X_OK):
                break
            fpath = None

    return fpath

def parse_args():
    """Read command line arguments, set global 'args' structure"""
    global args

    keygen = set_path('dnssec-keygen',
                      os.path.join(prefix('sbin'), 'dnssec-keygen'))
    settime = set_path('dnssec-settime',
                       os.path.join(prefix('sbin'), 'dnssec-settime'))

    parser = argparse.ArgumentParser(description=prog + ': schedule '
                                     'DNSSEC key rollovers according to a '
                                     'pre-defined policy')

    parser.add_argument('zone', type=str, nargs='?', default=None,
                        help='Zone to which the policy should to be applied ' +
                        '(default: all zones in the directory)')
    parser.add_argument('-K', dest='path', default='.', type=str,
                        help='Directory containing keys', metavar='dir')
    parser.add_argument('-c', dest='policyfile', type=str,
                        help='Policy definition file', metavar='file')
    parser.add_argument('-d', dest='keyttl', default='604800', type=str,
                        help='DNSKEY TTL [default: 1 week]',
                        metavar='time')
    parser.add_argument('-r', dest='resign', default='1944000', 
                        type=str, help='The RRSIG refresh interval '
                                       'in seconds [default: 22.5 days]',
                        metavar='time')
    parser.add_argument('-g', dest='keygen', default=keygen, type=str,
                        help='Path to \'dnssec-keygen\'',
                        metavar='path')
    parser.add_argument('-s', dest='settime', default=settime, type=str,
                        help='Path to \'dnssec-settime\'',
                        metavar='path')
    parser.add_argument('-k', dest='no_zsk',
                        action='store_true', default=False,
                        help='Only apply policy to key-signing keys (KSKs)')
    parser.add_argument('-z', dest='no_ksk',
                        action='store_true', default=False,
                        help='Only apply policy to zone-signing keys (ZSKs)')
    parser.add_argument('-v', '--version', action='version', version='9.1.1')

    args = parser.parse_args()

    if args.no_zsk and args.no_ksk:
        print("ERROR: -z and -k cannot be used together.");
        exit(1)

    # convert from time arguments to seconds
    try:
        if args.keyttl:
            k = parse_time(args.keyttl)
            args.keyttl = k
    except:
        pass

    try:
        if args.resign:
            r = parse_time(args.resign)
            args.resign = r
    except:
        pass

############################################################################
# main
############################################################################
if __name__ == "__main__":
    parse_args()

    kd = keydict(args.path, zone=args.zone, keyttl=args.keyttl)
    ks = keyseries(kd)
    ks.enforce_policy(None, args.policyfile, ksk=args.no_zsk, zsk=args.no_ksk)
